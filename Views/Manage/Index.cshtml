@using CarMessenger.Models
@model CarMessenger.Models.IndexViewModel

@{
    var maxOwnedLimit = 100;
    var maxCoOwnedLimit = 100;

    var ownedCars = ViewBag.OwnedCars as List<CarModel>;
    var coOwnedCars = ViewBag.CoOwnedCars as List<CarModel>;
    var carRequests = ViewBag.Requests as List<CarModel>;
    var carInvitations = ViewBag.Invitations as List<CarModel>;
}
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

<h2>Manage your account</h2>

<p class="text-success">@ViewBag.StatusMessage</p>
<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>Nickname:</dt>
        <dd>
            <text>@Model.Nickname</text>
            [@Html.ActionLink("Change your Nickname", "ChangeNickname")]
        </dd>
        <dt>Password:</dt>
        <dd>
            [
            @if (Model.HasPassword)
            {
                @Html.ActionLink("Change your password", "ChangePassword")
            }
            else
            {
                @Html.ActionLink("Create", "SetPassword")
            }
            ]
        </dd>
        @*<dt>External Logins:</dt>
            <dd>
                @Model.Logins.Count [
                @Html.ActionLink("Manage", "ManageLogins") ]
            </dd>*@
        @*
            Phone Numbers can used as a second factor of verification in a two-factor authentication system.

             See <a href="https://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
                for details on setting up this ASP.NET application to support two-factor authentication using SMS.

             Uncomment the following block after you have set up two-factor authentication
        *@

        @*<dt>Phone Number:</dt>
            <dd>
                @(Model.PhoneNumber ?? "None")
                @if (Model.PhoneNumber != null)
                {
                    <br />
                    <text>[&nbsp;&nbsp;@Html.ActionLink("Change", "AddPhoneNumber")&nbsp;&nbsp;]</text>
                    using (Html.BeginForm("RemovePhoneNumber", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <text>[<input type="submit" value="Remove" class="btn-link" />]</text>
                    }
                }
                else
                {
                    <text>[&nbsp;&nbsp;@Html.ActionLink("Add", "AddPhoneNumber") ]</text>
                }
            </dd>*@

        <!--<dt>Two-Factor Authentication:</dt>
        <dd>
            <p>
                There are no two-factor authentication providers configured. See <a href="https://go.microsoft.com/fwlink/?LinkId=403804">this article</a>
                for details on setting up this ASP.NET application to support two-factor authentication.
            </p>-->
        @*@if (Model.TwoFactor)
            {
                using (Html.BeginForm("DisableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <text>Enabled
                    <input type="submit" value="Disable" class="btn btn-link" />
                    </text>
                }
            }
            else
            {
                using (Html.BeginForm("EnableTwoFactorAuthentication", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <text>Disabled
                    <input type="submit" value="Enable" class="btn btn-link" />
                    </text>
                }
            }*@
        <!--</dd>-->
        @*<dt>Plate Number:</dt>
            <dd>
                @(Model.PlateNumber ?? "None")
                @if (Model.PhoneNumber != null)
                {
                    <br />
                    <text>[&nbsp;&nbsp;@Html.ActionLink("Change", "AddPhoneNumber")&nbsp;&nbsp;]</text>
                    using (Html.BeginForm("RemovePhoneNumber", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <text>[<input type="submit" value="Remove" class="btn-link" />]</text>
                    }
                }
                else
                {
                    <text>[&nbsp;&nbsp;@Html.ActionLink("Add", "AddPhoneNumber") ]</text>
                }
            </dd>*@

        <dt>
            Owned Cars (@(ownedCars?.Count() ?? 0)/@(Model.MaxOwned))
            @if ((coOwnedCars?.Count() ?? 0) >= (Model.MaxCoOwned))
            {
                if ((ownedCars?.Count() ?? 0) < maxOwnedLimit)
                {
                    <text>[&nbsp;&nbsp;@Html.ActionLink("Increase Owned Car Limit", "IncreaseOwnedCarLimit")&nbsp;&nbsp;]</text>
                }
            }
        </dt>
        <dd>
            <ul>
                @if (ViewBag.OwnedCars != null)
                {
                    foreach (var car in ownedCars)
                    {
                        <li>
                            <text> (@car.CountryCode) @car.Plate </text>
                            [&nbsp;&nbsp;@Html.ActionLink("Details", "../Cars/Details/" + car.Id)&nbsp;&nbsp;]
                        </li>
                    }
                }
                @if ((ownedCars?.Count() ?? 0) < maxOwnedLimit)
                {
                    if ((ownedCars?.Count() ?? 0) < Model.MaxOwned)
                    {
                        <li><text>[&nbsp;&nbsp;@Html.ActionLink("Add Car", "../Cars/Create")&nbsp;&nbsp;]</text></li>
                    }
                    else
                    {
                        <text>None</text>
                    }
                }
            </ul>
        </dd>

        <dt>
            CoOwned Cars (@(coOwnedCars?.Count() ?? 0)/@(Model.MaxCoOwned))
            @if ((coOwnedCars?.Count() ?? 0) >= (Model.MaxCoOwned))
            {
                if ((coOwnedCars?.Count() ?? 0) < maxCoOwnedLimit)
                {
                    <text>[@Html.ActionLink("Increase CoOwned Car Limit", "IncreaseCoOwnedCarLimit")]</text>
                }
            }
        </dt>
        <dd>
            <ul>
                @if (ViewBag.CoOwnedCars != null)
                {
                    foreach (var car in coOwnedCars)
                    {
                        <li>
                            <text> (@car.CountryCode) @car.Plate </text>
                            <text> ([&nbsp; &nbsp; @Html.ActionLink("Details", "../Cars/Details/" + car.Id) &nbsp; &nbsp;] </text>
                        </li>
                    }
                }

                @if ((coOwnedCars?.Count() ?? 0) < maxCoOwnedLimit)
                {
                    if ((coOwnedCars?.Count() ?? 0) < Model.MaxCoOwned)
                    {
                        <li><text>[&nbsp;&nbsp;@Html.ActionLink("Request Car", "../Cars/Request")&nbsp;&nbsp;]</text></li>
                    }
                    else
                    {
                        <text>None</text>
                    }
                }
            </ul>
        </dd>

        <dt>Pending Request:</dt>
        <dd>
            <ul>
                @if (ViewBag.Requests != null)
                {
                    foreach (var car in carRequests)
                    {
                        <li>
                            <text> (@car.CountryCode) @car.Plate </text>
                            [&nbsp;&nbsp;@Html.ActionLink("Remove", "../Cars/Delete", new { id = car.Id })&nbsp;&nbsp;]
                        </li>
                    }
                }
                else
                {
                    <text>None</text>
                }
            </ul>
        </dd>

        <dt>Pending Invitations:</dt>
        <dd>
            <ul>
                @if (ViewBag.Invitations != null)
                {
                    foreach (var car in carInvitations)
                    {
                        <li>
                            <text> (@car.CountryCode) @car.Plate </text>
                            [&nbsp;&nbsp;@Html.ActionLink("Accept", "../Cars/AcceptInvite", new { id = car.Id })&nbsp;
                            |&nbsp;&nbsp;@Html.ActionLink("Reject", "../Cars/Delete", new { id = car.Id })&nbsp;&nbsp;]
                        </li>
                    }
                }
                else
                {
                    <text>None</text>
                }
            </ul>
        </dd>
        @if (User.IsInRole("Admin"))
        {
            <dd><button class="btn btn-primary"> @Html.ActionLink("All Cars", "../Cars", null, new { Style = "color:White; text-decoration: none;" }) </button></dd>
        }
    </dl>
</div>

<!--Script references. -->
<!--Reference the SignalR library. -->
<script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>
<!--Add script to update the page and send messages.-->
<script type="text/javascript">
    function addInfoReloadMsg(msg) {
        var infoReloadMsgEl = $(
            '<div class="alert info"> \
                    <span class="closebtn" onclick="this.parentElement.style.display=\'none\';">&times;</span> \
                    <strong>Info:</strong>'
            + msg
            + '<button onClick="window.location.reload();">Click here</button> to see the changes</div>')[0];
        $('#Msgs')[0].append(infoReloadMsgEl);
    }

    $(document).ready(function () {

        // all server functions have the first letter lowered

        // Declare a proxy to reference the hub.
        var chat = $.connection.carHub;

        function addMessage(chatId, msgId, nickname, msg, mine = false) {
            // move chat head
            var el = $("#h_" + chatId);
            $("#heads_box").prepend(el);

            var readMsg = mine;
            if (!mine) {
                if (chatId == _selectedChatId) { // new message in the current chat
                    var currChatbox = $("#b_" + chatId);
                    var chatboxHeight = $("#chat_body").height();
                    if (currChatbox.scrollTop() + chatboxHeight >= currChatbox[0].scrollHeight) {
                        readMsg = true;
                    }
                }
                var headNewMsgs = $("#h_" + chatId + " .NewMsgs");
                if (!readMsg) {
                    // update new messages counter
                    headNewMsgs.css('display', 'inline');
                    if (headNewMsgs[0].innerHTML == 0) { // First new message
                        var NUM = $("#b_" + chatId + " .NUM");
                        $("#b_" + chatId).append(NUM);
                        NUM.css("display", "inline");
                    }
                    headNewMsgs[0].innerHTML -= -1; // adds 1 to string - js hack :)

                    // add notification if message was not read
                    notMsgComp = el.children();
                    notificationMsg = "New Message in chat: " + notMsgComp[0].innerHTML + " " + notMsgComp[1].innerHTML + (notMsgComp.length > 3 ? (" " + notMsgComp[2].innerHTML) : "");
                    Notification.requestPermission().then(permision => {
                        new Notification("CarMessanger", { body: notificationMsg });
                    });
                }
                else {
                    // remove unreadcounter
                    headNewMsgs[0].innerHTML = 0;
                    headNewMsgs.css('display', 'none');
                    // remove last read marker
                    $("#b_" + chatId + " .NUM").css("display", "none");
                }
            }

            $("#b_" + chatId).append('<div id="m_' + msgId + '" class="messege"><strong class="nickname">' + nickname + '</strong><text> : ' + msg + '</text></div>');

            if (readMsg) {
                var currChatbox = $("#b_" + chatId);
                currChatbox.scrollTop(currChatbox[0].scrollHeight * 2);
                if (!mine) {
                    chat.server.newSeen(chatId, msgId)
                }
            }
        }

        // Create a function that the hub can call to broadcast messages.
        chat.client.broadcastMessage = function (name, message) {
            console.log(name + ": " + message);
        };
        chat.client.addMessage = function (msgJson) {
            var msg = jQuery.parseJSON(msgJson);
            addMessage(msg.chatId, msg.Id, msg.nickname, msg.content);
        };
        chat.client.DeleteChat = function (chatId) {

            var chatH = $("#h_" + chatId)[0];
            var chatB = $("#b_" + chatId)[0];
            var warningMsgEl = $(
                '<div class="alert warning"> \
                    <span class="closebtn" onclick="this.parentElement.style.display=\'none\';">&times;</span> \
                    <strong>Well... </strong> The "'
                + chatH.innerHTML
                + '" Chat was removed</div>')[0];
            $('#Msgs')[0].append(warningMsgEl);

            chatH.remove();
            chatB.remove();

            if (chatId == _selectedChatId) {
                resetContent()
                $("#chat_box").css('display', 'none');
                _selectedChatId = undefined;
            }

            // callback function
            chat.server.disconnectChat(chatId);
        };
        chat.client.UpdateCarChat = function (chatId, plate, code) {
            $("#h_" + chatId + " .carPlate")[0].innerHTML = plate;
            $("#h_" + chatId + " .carCode")[0].innerHTML = code;

            $("#b_" + chatId + " .carPlate").each((ind, el) => el.innerHTML = plate);
            $("#b_" + chatId + " .carCode").each((ind, el) => el.innerHTML = code);
        };
        chat.client.UpdateNickChat = function (chatId, nick) {
            var els = $("#h_" + chatId + " .nickname")
            if (els.length > 0)
                els[0].innerHTML = nick;
        };
        chat.client.UpdateNickMsg = function (chatId, nick, msgIdList) {
            msgIdList.forEach((msgId) => {
                var els = $("#b_" + chatId + " #m_" + msgId + " .nickname")
                if (els.length > 0)
                    els[0].innerHTML = nick;
            });
        };
        chat.client.AddChat = function (newChat) {
            if ($("#h_" + newChat.chatId).length > 0) return; // error already exists
            $("#heads_box").prepend(
                '<div id="h_' + newChat.chatId
                + '" class="contacts_card chat_head ' + newChat.plate + " " + newChat.code + (newChat.owned == true ? " Owned" : "") + '" style="border: 1px solid; border-color: black">'
                + '(<text class="carCode">' + newChat.code + '</text>) <strong class="carPlate">' + newChat.plate + '</strong> '
                + ((newChat.owning == false) ? ('') : (
                    (newChat.info != null) ? (
                        '<text>(<text class="nickname">' + newChat.info + '</text>)</text>'
                    ) : (
                        '<text><strong>#</strong></text>'
                    )
                )) + '</div>'
            );
            var id = newChat.chatId;
            $("#h_" + newChat.chatId).click(function () { select_head(id); });
            $("#chat_body").append(
                '<div id="b_' + newChat.chatId + '" class="card-body msg_card_body contact_body chat_body" style="overflow-y: scroll; height:400px;">'
                + '</div>'
            );
            chat.server.joinNewChat(newChat.chatId);
        }
        chat.client.NotifyNewOwner = function (carName, isCoOwner) {
            var msg = "You are now the " + (isCoOwner ? "Co" : "") + "Owner of the car: " + carName + "! ";
            addInfoReloadMsg(msg);
        }

        // Start the connection.
        $.connection.hub.start().done(function () {

            chat.server.joinMyChats();
            chat.server.joinMyCars();
            chat.server.joinMyNotifications();

            $('#messageInput').val('').focus();

            $("#messageInput").click(function () {

                var headNewMsgs = $("#h_" + _selectedChatId + " .NewMsgs");
                headNewMsgs.css('display', 'none');
                headNewMsgs[0].innerHTML = "0";

                $("#b_" + _selectedChatId + " .NUM").css('display', 'none');


                if (_selectedChatId) {
                    var msgId = getLastMsgs(_selectedChatId);
                    if (msgId) {
                        chat.server.newSeen(_selectedChatId, msgId);
                    }
                }
            });


            function send() {
                if (getContent() === "") {
                    $('#messageInput').val('').focus();
                    return;
                }
                var id = "h_" + _selectedChatId;
                var owned = getOwned(id);

                var headNewMsgs = $("#h_" + _selectedChatId + " .NewMsgs");
                headNewMsgs.css('display', 'none');
                headNewMsgs[0].innerHTML = "0";

                $("#b_" + _selectedChatId + " .NUM").css('display', 'none')

                addMessage(_selectedChatId, "", "You", getContent(), true);

                chat.server.messageChat(_selectedChatId, getContent())
                $('#messageInput').val('').focus();
            }

            $('#sendButton').click(send);
            $("#messageInput").keyup(function (event) {
                if (event.keyCode === 13) { // enter
                    send();
                }
            });

            $('div.chat_head').click(function (event) {
                var e = $(event.currentTarget);
                if (!e.is('div')) return;
                var chatId = e.attr('id').substring(2);
                var lastMsgId = getLastMsgs(chatId);
                if (lastMsgId) {
                    chat.server.newSeen(chatId, lastMsgId);
                }
            });
        });
    });
</script>